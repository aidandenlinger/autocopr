name: Check or update spec files
description: Check or update RPM spec files to the project's latest version released on Github

inputs:
  mode:
    description: "The mode the action should run in. Options:
      - `push`: Automated updates. If any specfile are outdated, write new specfiles, make a commit for each with an associated tag, and push it to the repo. Requires `contents: write` permissions on the GITHUB_TOKEN to allow for pushes to a repo. See the `README.md` to learn how to start a COPR build based on these commits being pushed.

      - `check`: Manual updates. The job succeeds if all specfiles are up to date and fails if any are outdated. This mode does not write new files or push any updates - updating the specfile requires manual action. This mode is more secure since the action is read-only.

      - `dry-run`: Intended for testing. The job is read-only and always succeeds, no matter if the specfiles are up to date or not. Like all other modes, it logs to stdout which files are up to date or not.

      There are other modes you can use here (`update`), but they're only intended for local use. You can read about them in the README under the `mode` flag, and you're allowed to use them here. If you find a use for them in CI, raise an issue and I'll document them here!"
    required: true

  root_loc:
    description: "A path to a folder, relative to the repo root, where the action will  look for spec files. This searches recursively. Defaults to checking the entire repo."
    default: '.'  # Defaults to the root of the repo

  verbose:
    description: "If the script should log additional information to stdout. Options: `true` or `false` (default)."
    default: "false"

runs:
  using: composite

  steps:
    - uses: actions/setup-python@a26af69be951a213d495a4c3e4e4022e16d87065 # v5.6.0
      with:
        python-version: '3.13'
        # FIXME: Caching outside of the directory is not supported right now.
        # I could work around it, but frankly I'm only installing requests, it isn't worth it
        # Implement when the issue is resolved
        # https://github.com/actions/setup-python/issues/361
        # cache: 'pip'
        # cache-dependency-path: "${{ github.action_path }}/requirements.txt"

    - name: Install dependencies
      shell: bash
      working-directory: ${{ github.action_path }}
      # https://www.b-list.org/weblog/2023/dec/07/pip-install-safely/ for logic behind the flags used here
      run: "python -m pip install --require-hashes --no-deps --only-binary :all: -r requirements.txt"

    - name: Set git user to github-actions[bot]
      shell: bash
      run: |
        git config --local user.name "github-actions[bot]"
        git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"

    - name: Cache GraphQL API IDs
      uses: actions/cache@0400d5f644dc74513175e3cd8d07132dd4860809 # v4.2.4
      with:
        path: ${{ inputs.root_loc }}/graphql_id_cache.json
        # This key is overkill - we really only need to update the
        # cache when a *new* spec file is added, not when *any* spec
        # file changes. However, this seems to be the easiest way
        # to achieve that from within Actions.
        key: autocopr-graphql-ids-${{ hashFiles(format('{0}/**/*.spec', inputs.root_loc)) }}
        # Make sure even if the specs change it grabs the old cache
        # to start from! Entries are never invalidated, only added
        restore-keys: autocopr-graphql-ids

    - name: Check and update spec files
      shell: bash
      run: "${ACTIONS_FOLDER}/action.sh"
      env:
        GITHUB_TOKEN: ${{ github.token }}
        ACTIONS_FOLDER: ${{ github.action_path }}
        ROOT_LOC: ${{ github.workspace }}/${{ inputs.root_loc }}
        MODE: ${{ inputs.mode }}
        VERBOSE: ${{ inputs.verbose }}
